##
## EPITECH PROJECT, 2020
## undefined
## File description:
## automakefile
##

#!/bin/bash

make_file()
{
	if [ -z $project_directory ]
	then
		exit 84
	fi
	echo -e "NAME\t=\t$exec_arg" >> $project_directory/Makefile
	echo -e "\nCC\t=\t$cc_arg" >> $project_directory/Makefile
	for ((i = 0; $i != n_src; i++))
	do
		if [ $i == 0 ]
		then
			echo -e "\nSRC\t=\t$sources_directory/${src_arg[$i]} \\" >> $project_directory/Makefile #SRC A FAIRE
		else
			echo -e "\t\t$sources_directory/${src_arg[$i]} \\" >> $project_directory/Makefile
		fi
	done
	echo -e "\nOBJ\t=\t\$(SRC:.c=.o)" >> $project_directory/Makefile
	echo -e "\nCFLAGS\t=\t$cflags_arg" >> $project_directory/Makefile
	echo -e "\nLDFLAGS\t=\t$ldflags_arg" >> $project_directory/Makefile
	echo -e "\nRM\t=\trm -f" >> $project_directory/Makefile
	echo -e "\nall:\t\$(NAME)" >> $project_directory/Makefile
	echo -e "\$(NAME): \$(OBJ)" >> $project_directory/Makefile
	echo -e "\n\t\$(CC) -o \$(NAME) \$(OBJ) \$(CFLAGS) \$(LDFLAGS)" >> $project_directory/Makefile
	echo -e "\nclean:" >> $project_directory/Makefile
	echo -e "\n\t\$(RM) \$(OBJ)" >> $project_directory/Makefile
	echo -e "\nfclean: clean" >> $project_directory/Makefile
	echo -e "\n\t\$(RM) \$(NAME)" >> $project_directory/Makefile
	echo -e "\nre: fclean all" >> $project_directory/Makefile
	echo -e "\narchive:" >> $project_directory/Makefile
	echo -e "\n\tmkdir -p $bck_directory" >> $project_directory/Makefile
	echo -e "\n\t$zip_arg $zipflags_arg $bck_directory/backup_001.tar \$(SRC)" >> $project_directory/Makefile
	echo -e "\n\t@echo \"backup file generated.\"" >> $project_directory/Makefile
	echo -e "\nrevert:" >> $project_directory/Makefile
	echo -e "\n\t$unzip_arg $unzipflags_arg" >> $project_directory/Makefile
	echo -e "\nnum:" >> $project_directory/Makefile
	echo -e "\n\t_001" >> $project_directory/Makefile
	echo -e "\ndelete:" >> $project_directory/Makefile
	echo -e "\n\t\$(RM) $bck_directory" >> $project_directory/Makefile
	echo -e "\n.PHONY: all clean fclean re archive revert num delete" >> $project_directory/Makefile
}

parsing_args()
{
	n_src=0;
	IFS=";"
	while read line
		do
			tab=($line)
		if [[ ${tab[0]} == *.c ]]
		then
			src_arg[n_src]=${tab[0]}
			((n_src++))
		elif [[ ${tab[0]} == "PROJECT_DIR" ]]
		then
			project_directory=${tab[1]}
		elif [[ ${tab[0]} == "SOURCES_DIR" ]]
		then
			sources_directory=${tab[1]}
		elif [[ ${tab[0]} == "HEADERS_DIR" ]]
		then
			headers_directory=${tab[1]}
		elif [[ ${tab[0]} == "LIBS_DIR" ]]
		then
			libs_directory=${tab[1]}
		elif [[ ${tab[0]} == "EXEC" ]]
		then
			exec_arg=${tab[1]}
		elif [[ ${tab[0]} == "CC" ]]
		then
			cc_arg=${tab[1]}
		elif [[ ${tab[0]} == "CFLAGS" ]]
		then
			cflags_arg=${tab[1]}
		elif [[ ${tab[0]} == "LDFLAGS" ]]
		then
			ldflags_arg=${tab[1]}
		elif [[ ${tab[0]} == "BCK_DIR" ]]
		then
			bck_directory=${tab[1]}
		elif [[ ${tab[0]} == "ZIP" ]]
		then
			zip_arg=${tab[1]}
		elif [[ ${tab[0]} == "ZIPFLAGS" ]]
		then
			zipflags_arg=${tab[1]}
		elif [[ ${tab[0]} == "UNZIP" ]]
		then
			unzip_arg=${tab[1]}
		elif [[ ${tab[0]} == "UNZIPFLAGS" ]]
		then
			unzipflags_arg=${tab[1]}
		fi
	done < $1

	make_file $n_src $1 $src_arg $project_directory $sources_directory $headers_directory $libs_directory $exec_arg $cc_arg $cflags_arg $ldflags_arg $bck_directory $zip_arg $zipflags_arg $unzip_arg $unzipflags_arg
}

error_check()
{
	if [ -z $1 ]
	then
		echo "empty str"
		exit 84
	elif [ ! -f $1 ]
	then
		echo "not a file"
		exit 84
	fi
}

automakefile()
{
	error_check $1
	parsing_args $1
}

automakefile $1
exit 0